#include <stdlib.h>
#include <string.h>

#include <algorithm>
#include <fstream>
#include <iostream>
#include <set>
#include <sstream>
#include <vector>

using namespace std;

typedef struct line {
    string name;           // 역명
    float x;               // x좌표
    float y;               // y좌표
    string near[9];        // 근접 역명
    int near_time[9];      // 근점 역 소요 시간
    int near_num;          // 근접 역 수
    int transfer[9];       // 환승역(배열)
    int transfer_time[9];  // 환승 소요 시간(배열, 초)
    int transfer_num;      // 환승역 수
};

// - 역명 - 좌표값 - 근접 역명[배열] - 근접 역 이동 시간[배열]

vector<line> line_1{
    {"서울역", 37.554648, 126.972559, {"시청"}, {120}, 1, {4}, {133}, 1},
    {"시청", 37.564718, 126.977108, {"종각", "서울역"}, {120, 120}, 2, {1, 2}, {84, 84}, 2},
    {"종각", 37.570161, 126.982923, {"종로3가", "시청"}, {120, 90}, 2, {}, {}, 0},
    {"종로3가", 37.571607, 126.991806, {"종로5가", "종각"}, {90, 90}, 2, {3, 5}, {98, 260}, 2},
    {"종로5가", 37.570926, 127.001849, {"동대문", "종로3가"}, {90, 90}, 2, {}, {}, 0},
    {"동대문", 37.57142, 127.009745, {"동묘앞", "종로5가"}, {90, 60}, 2, {4}, {162}, 1},
    {"동묘앞", 37.572627, 127.016429, {"신설동", "동대문"}, {60, 90}, 2, {6}, {80}, 1},
    {"신설동", 37.575297, 127.025087, {"제기동", "동묘앞"}, {90, 90}, 2, {2}, {108}, 1},
    {"제기동", 37.578103, 127.034893, {"신설동"}, {90}, 1, {}, {}, 0},
};

vector<line> line_2{
    {"뚝섬", 37.547184, 127.047367, {"한양대", "성수"}, {90, 60}, 2, {}, {}, 0},
    {"한양대", 37.555273, 127.043655, {"왕십리", "뚝섬"}, {90, 90}, 2, {}, {}, 0},
    {"왕십리", 37.561533, 127.037732, {"상왕십리", "한양대"}, {60, 90}, 2, {5}, {72}, 1},
    {"상왕십리", 37.564354, 127.029354, {"신당", "왕십리"}, {60, 60}, 2, {}, {}, 0},
    {"신당", 37.565972, 127.01782, {"동대문역사문화공원", "상왕십리"}, {90, 60}, 2, {6}, {202}, 1},
    {"동대문역사문화공원", 37.565138, 127.007896, {"을지로4가", "신당"}, {90, 90}, 2, {4, 5}, {38, 195}, 2},
    {"을지로4가", 37.566941, 126.998079, {"을지로3가", "동대문역사문화공원"}, {60, 90}, 2, {5}, {64}, 1},
    {"을지로3가", 37.566295, 126.99191, {"을지로입구", "을지로4가"}, {60, 60}, 2, {3}, {124}, 1},
    {"을지로입구", 37.566014, 126.982618, {"시청", "을지로3가"}, {90, 60}, 2, {}, {}, 0},
    {"시청", 37.564718, 126.977108, {"충정로", "을지로입구"}, {90, 90}, 2, {}, {}, 0},
    {"충정로", 37.559973, 126.963672, {"아현", "시청"}, {90, 90}, 2, {5}, {177}, 1},
    {"아현", 37.557345, 126.956141, {"이대", "충정로"}, {60, 90}, 2, {}, {}, 0},
    {"이대", 37.556733, 126.946013, {"신촌", "아현"}, {60, 60}, 2, {}, {}, 0},
    {"신촌", 37.555134, 126.936893, {"홍대입구", "이대"}, {120, 60}, 2, {}, {}, 0},
    {"홍대입구", 37.557192, 126.925381, {"합정", "신촌"}, {90, 120}, 2, {}, {}, 0},
    {"합정", 37.549463, 126.913739, {"당산", "홍대입구"}, {150, 90}, 2, {6}, {68}, 1},
    {"당산", 37.53438, 126.902281, {"영등포구청", "합정"}, {90, 150}, 2, {}, {}, 0},
    {"영등포구청", 37.52497, 126.895951, {"문래", "당산"}, {60, 90}, 2, {5}, {92}, 1},
    {"문래", 37.517933, 126.89476, {"신도림", "영등포구청"}, {120, 60}, 2, {}, {}, 0},
    {"신도림", 37.508725, 126.891295, {"문래", "대림", "도림천"}, {60, 120, 90}, 3, {1}, {68}, 1},
    {"대림", 37.49297, 126.895801, {"구로디지털단지", "신도림"}, {90, 120}, 2, {7}, {230}, 1},
    {"구로디지털단지", 37.485266, 126.901401, {"신대방", "대림"}, {90, 90}, 2, {}, {}, 0},
    {"신대방", 37.487462, 126.913149, {"신림", "구로디지털단지"}, {120, 90}, 2, {}, {}, 0},
    {"신림", 37.484201, 126.929715, {"봉천", "신대방"}, {90, 120}, 2, {}, {}, 0},
    {"봉천", 37.482362, 126.941892, {"서울대입구", "신림"}, {60, 90}, 2, {}, {}, 0},
    {"서울대입구", 37.481247, 126.952739, {"낙성대", "봉천"}, {90, 60}, 2, {}, {}, 0},
    {"낙성대", 37.47693, 126.963693, {"사당", "서울대입구"}, {120, 90}, 2, {}, {}, 0},
    {"사당", 37.47653, 126.981685, {"방배", "낙성대"}, {150, 120}, 2, {4}, {62}, 1},
    {"방배", 37.481426, 126.997596, {"서초", "사당"}, {120, 150}, 2, {}, {}, 0},
    {"서초", 37.491897, 127.007917, {"교대", "방배"}, {60, 120}, 2, {}, {}, 0},
    {"교대", 37.493415, 127.01408, {"강남", "서초"}, {90, 60}, 2, {3}, {63}, 1},
    {"강남", 37.497175, 127.027926, {"역삼", "교대"}, {60, 90}, 2, {}, {}, 0},
    {"역삼", 37.500622, 127.036456, {"선릉", "강남"}, {90, 60}, 2, {}, {}, 0},
    {"선릉", 37.504503, 127.049008, {"삼성", "역삼"}, {90, 90}, 2, {}, {}, 0},
    {"삼성", 37.508844, 127.06316, {"종합운동장", "선릉"}, {90, 90}, 2, {}, {}, 0},
    {"종합운동장", 37.510997, 127.073642, {"잠실새내", "삼성"}, {90, 90}, 2, {}, {}, 0},
    {"잠실새내", 37.511687, 127.086162, {"잠실", "종합운동장"}, {90, 90}, 2, {}, {}, 0},
    {"잠실", 37.51395, 127.102234, {"잠실나루", "잠실새내"}, {90, 90}, 2, {8}, {158}, 1},
    {"잠실나루", 37.520733, 127.10379, {"강변", "잠실"}, {120, 90}, 2, {}, {}, 0},
    {"강변", 37.535095, 127.094681, {"구의", "잠실나루"}, {60, 120}, 2, {}, {}, 0},
    {"구의", 37.537077, 127.085916, {"건대입구", "강변"}, {120, 60}, 2, {}, {}, 0},
    {"건대입구", 37.540693, 127.07023, {"성수", "구의"}, {90, 120}, 2, {7}, {64}, 1},
    {"성수", 37.544581, 127.055961, {"건대입구", "용답", "뚝섬"}, {90, 60, 60}, 3, {}, {}, 0},
    {"용답", 37.561904, 127.050899, {"신답", "성수"}, {90, 60}, 2, {}, {}, 0},
    {"신답", 37.57004, 127.046481, {"용두", "용답"}, {90, 90}, 2, {}, {}, 0},
    {"용두", 37.574028, 127.038091, {"신설동", "신답"}, {90, 90}, 2, {}, {}, 0},
    {"신설동", 37.575297, 127.025087, {"용두"}, {120, 90}, 1, {2}, {108}, 1},
    {"까치산", 37.531768, 126.846683, {"신정네거리"}, {150, 120}, 1, {}, {}, 0},
    {"신정네거리", 37.520074, 126.852912, {"양천구청", "까치산"}, {180, 150}, 2, {}, {}, 0},
    {"양천구청", 37.512398, 126.865819, {"도림천", "신정네거리"}, {150, 180}, 2, {}, {}, 0},
    {"도림천", 37.514287, 126.882768, {"신도림", "양천구청"}, {90, 150}, 2, {}, {}, 0},
};

vector<line> line_3{
    {"오금", 37.502162, 127.128111, {"경찰병원"}, {90}, 1, {5}, {54}, 1},
    {"경찰병원", 37.495918, 127.12454, {"가락시장", "오금"}, {90, 60}, 2, {}, {}, 0},
    {"가락시장", 37.492522, 127.118234, {"수서", "경찰병원"}, {60, 120}, 2, {8}, {29}, 1},
    {"수서", 37.487371, 127.10188, {"일원", "가락시장"}, {120, 120}, 2, {}, {}, 0},
    {"일원", 37.483681, 127.08439, {"대청", "수서"}, {120, 90}, 2, {}, {}, 0},
    {"대청", 37.493514, 127.079532, {"학여울", "일원"}, {90, 90}, 2, {}, {}, 0},
    {"학여울", 37.496663, 127.070594, {"대치", "대청"}, {90, 60}, 2, {}, {}, 0},
    {"대치", 37.494612, 127.063642, {"도곡", "학여울"}, {60, 60}, 2, {}, {}, 0},
    {"도곡", 37.490858, 127.055381, {"매봉", "대치"}, {60, 60}, 2, {}, {}, 0},
    {"매봉", 37.486947, 127.046769, {"양재", "도곡"}, {60, 90}, 2, {}, {}, 0},
    {"양재", 37.484147, 127.034631, {"남부터미널", "매봉"}, {90, 120}, 2, {}, {}, 0},
    {"남부터미널", 37.485013, 127.016189, {"교대", "양재"}, {120, 90}, 2, {}, {}, 0},
    {"교대", 37.493415, 127.01408, {"고속터미널", "남부터미널"}, {90, 120}, 2, {2}, {63}, 1},
    {"고속터미널", 37.50481, 127.004943, {"잠원", "교대"}, {120, 90}, 2, {7, 9}, {141, 129}, 2},
    {"잠원", 37.512759, 127.01122, {"신사", "고속터미널"}, {90, 60}, 2, {}, {}, 0},
    {"신사", 37.516334, 127.020114, {"압구정", "잠원"}, {60, 120}, 2, {}, {}, 0},
    {"압구정", 37.527072, 127.028461, {"옥수", "신사"}, {120, 150}, 2, {}, {}, 0},
    {"옥수", 37.540685, 127.017965, {"금호", "압구정"}, {150, 60}, 2, {}, {}, 0},
    {"금호", 37.548034, 127.015872, {"약수", "옥수"}, {60, 60}, 2, {}, {}, 0},
    {"약수", 37.55434, 127.010655, {"동대입구", "금호"}, {60, 90}, 2, {6}, {108}, 1},
    {"동대입구", 37.559052, 127.005602, {"충무로", "약수"}, {90, 90}, 2, {}, {}, 0},
    {"충무로", 37.561243, 126.99428, {"을지로3가", "동대입구"}, {90, 60}, 2, {4}, {14}, 1},
    {"을지로3가", 37.566295, 126.99191, {"종로3가", "충무로"}, {60, 60}, 2, {2}, {124}, 1},
    {"종로3가", 37.571607, 126.991806, {"안국", "을지로3가"}, {60, 120}, 2, {1, 5}, {98, 98}, 2},
    {"안국", 37.576477, 126.985443, {"경복궁", "종로3가"}, {120, 90}, 2, {}, {}, 0},
    {"경복궁", 37.575762, 126.97353, {"독립문", "안국"}, {90, 120}, 2, {}, {}, 0},
    {"독립문", 37.574571, 126.957748, {"무악재", "경복궁"}, {120, 90}, 2, {}, {}, 0},
    {"무악재", 37.582299, 126.950291, {"홍제", "독립문"}, {90, 90}, 2, {}, {}, 0},
    {"홍제", 37.589066, 126.943736, {"녹번", "무악재"}, {90, 120}, 2, {}, {}, 0},
    {"녹번", 37.600927, 126.935756, {"불광", "홍제"}, {120, 90}, 2, {}, {}, 0},
    {"불광", 37.610469, 126.929887, {"연신내", "녹번"}, {90, 120}, 2, {6}, {83}, 1},
    {"연신내", 37.619001, 126.921008, {"구파발", "불광"}, {120, 150}, 2, {6}, {151}, 1},
    {"구파발", 37.636763, 126.918821, {"연신내"}, {150}, 1, {}, {}, 0},
};

vector<line> line_4{
    {"남태령", 37.463873, 126.989134, {"사당"}, {120}, 1, {}, {}, 0},
    {"사당", 37.47653, 126.981685, {"총신대입구", "남태령"}, {120, 90}, 2, {2}, {62}, 1},
    {"총신대입구", 37.486263, 126.981989, {"동작", "사당"}, {90, 150}, 2, {7}, {143}, 1},
    {"동작", 37.502971, 126.979306, {"이촌", "총신대입구"}, {150, 180}, 2, {9}, {204}, 1},
    {"이촌", 37.522272, 126.974345, {"신용산", "동작"}, {180, 120}, 2, {}, {}, 0},
    {"신용산", 37.52917, 126.967894, {"삼각지", "이촌"}, {120, 60}, 2, {0}, {}, 0},
    {"삼각지", 37.534777, 126.97311, {"숙대입구", "신용산"}, {60, 90}, 2, {6}, {129}, 1},
    {"숙대입구", 37.54456, 126.972106, {"서울역", "삼각지"}, {90, 90}, 2, {0}, {}, 0},
    {"서울역", 37.554648, 126.972559, {"회현", "숙대입구"}, {90, 90}, 2, {1}, {133}, 1},
    {"회현", 37.558514, 126.978246, {"명동", "서울역"}, {90, 60}, 2, {}, {}, 0},
    {"명동", 37.560989, 126.986325, {"충무로", "회현"}, {60, 60}, 2, {}, {}, 0},
    {"충무로", 37.561243, 126.99428, {"동대문역사문화공원", "명동"}, {60, 120}, 2, {3}, {14}, 1},
    {"동대문역사문화공원", 37.565138, 127.007896, {"동대문", "충무로"}, {120, 60}, 2, {2, 5}, {38, 89}, 2},
    {"동대문", 37.57142, 127.009745, {"혜화", "동대문역사문화공원"}, {60, 120}, 2, {1}, {162}, 1},
    {"혜화", 37.582336, 127.001844, {"한성대입구", "동대문"}, {120, 90}, 2, {}, {}, 0},
    {"한성대입구", 37.588458, 127.006221, {"성신여대입구", "혜화"}, {90, 90}, 2, {}, {}, 0},
    {"성신여대입구", 37.592624, 127.016403, {"길음", "한성대입구"}, {90, 120}, 2, {}, {}, 0},
    {"길음", 37.603407, 127.025053, {"미아사거리", "성신여대입구"}, {120, 120}, 2, {}, {}, 0},
    {"미아사거리", 37.613292, 127.030053, {"미아", "길음"}, {120, 120}, 2, {}, {}, 0},
    {"미아", 37.62667, 127.025983, {"수유", "미아사거리"}, {120, 90}, 2, {}, {}, 0},
    {"수유", 37.638052, 127.025732, {"쌍문", "미아"}, {90, 120}, 2, {}, {}, 0},
    {"쌍문", 37.648627, 127.034709, {"창동", "수유"}, {120, 120}, 2, {}, {}, 0},
    {"창동", 37.653166, 127.047731, {"노원", "쌍문"}, {120, 90}, 2, {1}, {70}, 1},
    {"노원", 37.655128, 127.061368, {"상계", "창동"}, {90, 90}, 2, {7}, {232}, 1},
    {"상계", 37.660878, 127.073572, {"당고개", "노원"}, {90, 150}, 2, {}, {}, 0},
    {"당고개", 37.670272, 127.079066, {"상계"}, {150}, 1, {}, {}, 0},
};

vector<line> line_5{
    {"개화산", 37.572399, 126.806171, {"김포공항"}, {90}, 1, {}, {}, 0},
    {"김포공항", 37.562434, 126.801058, {"송정", "개화산"}, {100, 90}, 2, {}, {}, 0},
    {"송정", 37.561184, 126.811973, {"마곡", "김포공항"}, {130, 100}, 2, {}, {}, 0},
    {"마곡", 37.560183, 126.825448, {"발산", "송정"}, {90, 130}, 2, {}, {}, 0},
    {"발산", 37.558598, 126.837668, {"우장산", "마곡"}, {100, 90}, 2, {}, {}, 0},
    {"우장산", 37.548768, 126.836318, {"화곡", "발산"}, {90, 100}, 2, {}, {}, 0},
    {"화곡", 37.541513, 126.840461, {"까치산", "우장산"}, {90, 90}, 2, {}, {}, 0},
    {"까치산", 37.531768, 126.846683, {"신정", "화곡"}, {90, 90}, 2, {2}, {14}, 1},
    {"신정", 37.524997, 126.856191, {"목동", "까치산"}, {110, 90}, 2, {}, {}, 0},
    {"목동", 37.526065, 126.864931, {"오목교", "신정"}, {70, 110}, 2, {}, {}, 0},
    {"오목교", 37.524496, 126.875181, {"양평", "목동"}, {80, 70}, 2, {}, {}, 0},
    {"양평", 37.492832, 127.491814, {"영등포구청", "오목교"}, {80, 80}, 2, {}, {}, 0},
    {"영등포구청", 37.52497, 126.895951, {"영등포시장", "양평"}, {70, 80}, 2, {2}, {92}, 1},
    {"영등포시장", 37.522669, 126.905139, {"신길", "영등포구청"}, {70, 70}, 2, {}, {}, 0},
    {"신길", 37.517122, 126.917169, {"여의도", "영등포시장"}, {90, 70}, 2, {1}, {202}, 1},
    {"여의도", 37.521624, 126.924191, {"여의나루", "신길"}, {90, 90}, 2, {}, {}, 0},
    {"여의나루", 37.527098, 126.932901, {"마포", "여의도"}, {80, 90}, 2, {}, {}, 0},
    {"마포", 37.539574, 126.945932, {"공덕", "여의나루"}, {120, 80}, 2, {}, {}, 0},
    {"공덕", 37.544018, 126.951592, {"애오개", "마포"}, {70, 120}, 2, {6}, {61}, 1},
    {"애오개", 37.553736, 126.95682, {"충정로", "공덕"}, {80, 70}, 2, {}, {}, 0},
    {"충정로", 37.559973, 126.963672, {"서대문", "애오개"}, {80, 80}, 2, {2}, {177}, 1},
    {"서대문", 37.565773, 126.966641, {"광화문", "충정로"}, {60, 80}, 2, {}, {}, 0},
    {"광화문", 37.571026, 126.976669, {"종로3가", "서대문"}, {90, 60}, 2, {}, {}, 0},
    {"종로3가", 37.571607, 126.991806, {"을지로4가", "광화문"}, {100, 90}, 2, {1, 3}, {260, 98}, 2},
    {"을지로4가", 37.566941, 126.998079, {"동대문역사문화공원", "종로3가"}, {100, 100}, 2, {2}, {64}, 1},
    {"동대문역사문화공원", 37.565138, 127.007896, {"청구", "을지로4가"}, {90, 100}, 2, {2, 4}, {195, 89}, 2},
    {"청구", 37.560245, 127.013828, {"신금호", "동대문역사문화공원"}, {80, 90}, 2, {6}, {87}, 1},
    {"신금호", 37.554548, 127.020331, {"행당", "청구"}, {90, 80}, 2, {}, {}, 0},
    {"행당", 37.557322, 127.029476, {"왕십리", "신금호"}, {80, 90}, 2, {}, {}, 0},
    {"왕십리", 37.561533, 127.037732, {"마장", "행당"}, {70, 80}, 2, {2}, {72}, 1},
    {"마장", 37.5661, 127.042973, {"답십리", "왕십리"}, {60, 70}, 2, {}, {}, 0},
    {"답십리", 37.566747, 127.052704, {"장한평", "마장"}, {100, 60}, 2, {}, {}, 0},
    {"장한평", 37.56144, 127.064623, {"군자", "답십리"}, {100, 100}, 2, {}, {}, 0},
    {"군자", 37.557121, 127.079542, {"아차산", "장한평"}, {100, 100}, 2, {7}, {63}, 1},
    {"아차산", 37.551691, 127.089761, {"광나루", "군자"}, {90, 100}, 2, {}, {}, 0},
    {"광나루", 37.545303, 127.10357, {"천호", "아차산"}, {110, 90}, 2, {}, {}, 0},
    {"천호", 37.538397, 127.123572, {"강동", "광나루"}, {130, 110}, 2, {8}, {29}, 1},
    {"강동", 37.535804, 127.132481, {"길동", "둔촌동", "천호"}, {70, 70, 130}, 3, {5}, {16}, 1},
    {"길동", 37.537801, 127.140004, {"굽은다리", "강동"}, {90, 70}, 2, {}, {}, 0},
    {"굽은다리", 37.545477, 127.142853, {"명일", "길동"}, {70, 90}, 2, {}, {}, 0},
    {"명일", 37.55137, 127.143999, {"고덕", "굽은다리"}, {70, 70}, 2, {}, {}, 0},
    {"고덕", 37.555004, 127.154151, {"상일동", "명일"}, {100, 70}, 2, {}, {}, 0},
    {"상일동", 37.556712, 127.166417, {"둔촌동", "고덕"}, {100, 100}, 2, {}, {}, 0},
    {"둔촌동", 37.527788, 127.136248, {"올림픽공원", "강동"}, {110, 70}, 2, {}, {}, 0},
    {"올림픽공원", 37.516078, 127.130848, {"방이", "둔촌동"}, {100, 110}, 2, {}, {}, 0},
    {"방이", 37.508857, 127.126133, {"오금", "올림픽공원"}, {80, 100}, 2, {}, {}, 0},
    {"오금", 37.502162, 127.128111, {"개농", "방이"}, {80, 80}, 2, {3}, {54}, 1},
    {"개농", 37.498079, 127.13482, {"거여", "오금"}, {70, 80}, 2, {}, {}, 0},
    {"거여", 37.493105, 127.14415, {"마천", "개농"}, {80, 70}, 2, {}, {}, 0},
    {"마천", 37.49499, 127.152781, {"거여"}, {}, 1, {80}, {}, 0},
};

vector<line> line_6{
    {"새절", 37.591148, 126.913629, {"증산"}, {80}, 1, {}, {}, 0},
    {"증산", 37.583876, 126.909645, {"디지털미디어시티", "새절"}, {80, 80}, 2, {}, {}, 0},
    {"디지털미디어시티", 37.576646, 126.900984, {"월드컵경기장", "증산"}, {90, 80}, 2, {}, {}, 0},
    {"월드컵경기장", 37.569532, 126.899298, {"마포구청", "디지털미디어시티"}, {70, 90}, 2, {}, {}, 0},
    {"마포구청", 37.563515, 126.903343, {"망원", "월드컵경기장"}, {70, 70}, 2, {}, {}, 0},
    {"망원", 37.556094, 126.910052, {"합정", "마포구청"}, {80, 70}, 2, {}, {}, 0},
    {"합정", 37.549463, 126.913739, {"상수", "망원"}, {80, 80}, 2, {}, {}, 0},
    {"상수", 37.547716, 126.922852, {"광흥창", "합정"}, {70, 80}, 2, {}, {}, 0},
    {"광흥창", 37.547456, 126.931993, {"대흥", "상수"}, {70, 70}, 2, {}, {}, 0},
    {"대흥", 37.547771, 126.942069, {"공덕", "광흥창"}, {90, 70}, 2, {}, {}, 0},
    {"공덕", 37.544018, 126.951592, {"효창공원앞", "대흥"}, {80, 90}, 2, {}, {}, 0},
    {"효창공원앞", 37.539261, 126.961351, {"삼각지", "공덕"}, {80, 80}, 2, {}, {}, 0},
    {"삼각지", 37.534777, 126.97311, {"녹사평", "효창공원앞"}, {90, 80}, 2, {}, {}, 0},
    {"녹사평", 37.534675, 126.986695, {"이태원", "삼각지"}, {100, 90}, 2, {}, {}, 0},
    {"이태원", 37.534488, 126.994302, {"한강진", "녹사평"}, {70, 100}, 2, {}, {}, 0},
    {"한강진", 37.539631, 127.001725, {"버티고개", "이태원"}, {90, 70}, 2, {}, {}, 0},
    {"버티고개", 37.548013, 127.007055, {"약수", "한강진"}, {90, 90}, 2, {}, {}, 0},
    {"약수", 37.55434, 127.010655, {"청구", "버티고개"}, {70, 90}, 2, {}, {}, 0},
    {"청구", 37.560245, 127.013828, {"신당", "약수"}, {70, 70}, 2, {}, {}, 0},
    {"신당", 37.565972, 127.01782, {"동묘앞", "청구"}, {70, 70}, 2, {}, {}, 0},
    {"동묘앞", 37.572627, 127.016429, {"창신", "신당"}, {60, 70}, 2, {}, {}, 0},
    {"창신", 37.579661, 127.015241, {"보문", "동묘앞"}, {80, 60}, 2, {}, {}, 0},
    {"보문", 37.585286, 127.019381, {"안암", "창신"}, {70, 80}, 2, {}, {}, 0},
    {"안암", 37.586272, 127.029005, {"고려대", "보문"}, {70, 70}, 2, {}, {}, 0},
    {"고려대", 37.590508, 127.036296, {"월곡", "안암"}, {70, 70}, 2, {}, {}, 0},
    {"월곡", 37.601948, 127.041518, {"상월곡", "고려대"}, {100, 70}, 2, {}, {}, 0},
    {"상월곡", 37.606377, 127.048491, {"돌곶이", "월곡"}, {70, 100}, 2, {}, {}, 0},
    {"돌곶이", 37.610537, 127.056431, {"석계", "상월곡"}, {70, 70}, 2, {}, {}, 0},
    {"석계", 37.614805, 127.065851, {"태릉입구", "돌곶이"}, {80, 70}, 2, {}, {}, 0},
    {"태릉입구", 37.617983, 127.07512, {"화랑대", "석계"}, {70, 80}, 2, {}, {}, 0},
    {"화랑대", 37.620064, 127.084689, {"봉화산", "태릉입구"}, {80, 70}, 2, {}, {}, 0},
    {"봉화산", 37.617283, 127.091401, {"신내", "화랑대"}, {270, 80}, 2, {}, {}, 0},
    {"신내", 37.612887, 127.103218, {"봉화산"}, {270}, 1, {}, {}, 0},
};

vector<line> line_7{
    {"수락산", 37.67785, 127.055315, {"마들"}, {140}, 1, {}, {}, 0},
    {"마들", 37.66494, 127.057675, {"노원", "수락산"}, {120, 140}, 2, {}, {}, 0},
    {"노원", 37.655128, 127.061368, {"중계", "마들"}, {90, 120}, 2, {4}, {232}, 1},
    {"중계", 37.644583, 127.064303, {"하계", "노원"}, {80, 90}, 2, {}, {}, 0},
    {"하계", 37.636352, 127.06799, {"공릉", "중계"}, {70, 80}, 2, {}, {}, 0},
    {"공릉", 37.625742, 127.072896, {"태릉입구", "하계"}, {90, 70}, 2, {}, {}, 0},
    {"태릉입구", 37.617983, 127.07512, {"먹골", "공릉"}, {60, 90}, 2, {6}, {38}, 1},
    {"먹골", 37.610637, 127.077725, {"중화", "태릉입구"}, {70, 60}, 2, {}, {}, 0},
    {"중화", 37.602545, 127.079264, {"상봉", "먹골"}, {80, 70}, 2, {}, {}, 0},
    {"상봉", 37.596362, 127.085032, {"면목", "중화"}, {110, 80}, 2, {}, {}, 0},
    {"면목", 37.588579, 127.087503, {"사가정", "상봉"}, {70, 110}, 2, {}, {}, 0},
    {"사가정", 37.580894, 127.088478, {"용마산", "면목"}, {70, 70}, 2, {}, {}, 0},
    {"용마산", 37.573647, 127.086727, {"중곡", "사가정"}, {70, 70}, 2, {}, {}, 0},
    {"중곡", 37.565923, 127.08432, {"군자", "용마산"}, {80, 70}, 2, {}, {}, 0},
    {"군자", 37.557121, 127.079542, {"어린이대공원", "중곡"}, {80, 80}, 2, {5}, {63}, 1},
    {"어린이대공원", 37.548014, 127.074658, {"건대입구", "군자"}, {80, 80}, 2, {}, {}, 0},
    {"건대입구", 37.540693, 127.07023, {"뚝섬유원지", "어린이대공원"}, {80, 80}, 2, {2}, {64}, 1},
    {"뚝섬유원지", 37.53154, 127.066704, {"청담", "건대입구"}, {90, 80}, 2, {}, {}, 0},
    {"청담", 37.519365, 127.05335, {"강남구청", "뚝섬유원지"}, {150, 90}, 2, {}, {}, 0},
    {"강남구청", 37.517186, 127.04128, {"학동", "청담"}, {90, 150}, 2, {}, {}, 0},
    {"학동", 37.514229, 127.031656, {"논현", "강남구청"}, {70, 90}, 2, {}, {}, 0},
    {"논현", 37.511093, 127.021415, {"반포", "학동"}, {80, 70}, 2, {}, {}, 0},
    {"반포", 37.508178, 127.011727, {"고속터미널", "논현"}, {70, 80}, 2, {}, {}, 0},
    {"고속터미널", 37.50481, 127.004943, {"내방", "반포"}, {90, 70}, 2, {3}, {141}, 1},
    {"내방", 37.487618, 126.993513, {"총신대입구", "고속터미널"}, {150, 90}, 2, {}, {}, 0},
    {"총신대입구", 37.486263, 126.981989, {"남성", "내방"}, {90, 150}, 2, {4}, {143}, 1},
    {"남성", 37.484596, 126.971251, {"숭실대입구", "총신대입구"}, {80, 90}, 2, {}, {}, 0},
    {"숭실대입구", 37.496029, 126.953822, {"상도", "남성"}, {150, 80}, 2, {}, {}, 0},
    {"상도", 37.502834, 126.94791, {"장승배기", "숭실대입구"}, {70, 150}, 2, {}, {}, 0},
    {"장승배기", 37.504898, 126.93915, {"신대방삼거리", "상도"}, {90, 70}, 2, {}, {}, 0},
    {"신대방삼거리", 37.499701, 126.928276, {"보라매", "장승배기"}, {110, 90}, 2, {}, {}, 0},
    {"보라매", 37.499872, 126.920428, {"신풍", "신대방삼거리"}, {70, 110}, 2, {}, {}, 0},
    {"신풍", 37.50008, 126.90993, {"대림", "보라매"}, {80, 70}, 2, {}, {}, 0},
    {"대림", 37.49297, 126.895801, {"남구로", "신풍"}, {120, 80}, 2, {2}, {230}, 1},
    {"남구로", 37.486056, 126.887249, {"가산디지털단지", "대림"}, {90, 120}, 2, {}, {}, 0},
    {"가산디지털단지", 37.481072, 126.882343, {"철산", "남구로"}, {80, 90}, 2, {1}, {92}, 1},
    {"철산", 37.47605, 126.867911, {"광명사거리", "가산디지털단지"}, {120, 80}, 2, {}, {}, 0},
    {"광명사거리", 37.479252, 126.854876, {"천왕", "철산"}, {110, 120}, 2, {}, {}, 0},
    {"천왕", 37.486637, 126.838713, {"온수", "광명사거리"}, {120, 110}, 2, {}, {}, 0},
    {"온수", 37.492258, 126.823388, {"도봉산", "천왕"}, {140, 120}, 2, {1}, {85}, 1},
    {"도봉산", 37.689313, 127.046222, {"온수"}, {270, 140}, 1, {1}, {37}, 1},
};

vector<line> line_8{
    {"모란", 37.43213, 127.129087, {"수진"}, {90}, 1, {}, {}, 0},
    {"수진", 37.437428, 127.140722, {"신흥", "모란"}, {90, 70}, 2, {}, {}, 0},
    {"신흥", 37.440918, 127.147564, {"당대오거리", "수진"}, {70, 70}, 2, {}, {}, 0},
    {"단대오거리", 37.44521, 127.156866, {"남한산성입구", "신흥"}, {70, 70}, 2, {}, {}, 0},
    {"남한산성입구", 37.451535, 127.159816, {"산성", "단대오거리"}, {70, 130}, 2, {}, {}, 0},
    {"산성", 37.457122, 127.149908, {"남위례", "남한산성입구"}, {130, 100}, 2, {}, {}, 0},
    {"남위례", 37.4635845, 127.138285, {"복정", "산성"}, {100, 110}, 2, {}, {}, 0},
    {"복정", 37.470047, 127.126662, {"장지", "남위례"}, {110, 70}, 2, {}, {}, 0},
    {"장지", 37.478703, 127.126191, {"문정", "복정"}, {70, 70}, 2, {}, {}, 0},
    {"문정", 37.485855, 127.1225, {"가락시장", "장지"}, {70, 70}, 2, {}, {}, 0},
    {"가락시장", 37.492522, 127.118234, {"송파", "문정"}, {70, 70}, 2, {3}, {29}, 1},
    {"송파", 37.499703, 127.112183, {"석촌", "가락시장"}, {70, 70}, 2, {}, {}, 0},
    {"석촌", 37.505431, 127.106979, {"잠실", "송파"}, {70, 110}, 2, {9}, {68}, 1},
    {"잠실", 37.51395, 127.102234, {"몽촌토성", "석촌"}, {110, 70}, 2, {2}, {158}, 1},
    {"몽촌토성", 37.517409, 127.112359, {"강동구청", "잠실"}, {70, 120}, 2, {}, {}, 0},
    {"강동구청", 37.530341, 127.120508, {"천호", "몽촌토성"}, {120, 80}, 2, {}, {}, 0},
    {"천호", 37.538397, 127.123572, {"강동구청", "암사"}, {80, 90}, 2, {5}, {29}, 1},
    {"암사", 37.55021, 127.127562, {"천호"}, {90}, 1, {}, {}, 0},
};

// 역 정보 저장 vector
vector<vector<line>> stations{line_1, line_2, line_3, line_4, line_5, line_6, line_7, line_8};

// 환승 정보 저장 vector
vector<vector<string>> transferVector;

bool checkStation(vector<line> l, string s, int n) {
    for (int i = 0; i < n; i++) {
        if (l[i].name.compare(s) == 0) {
            return true;
        }
    }
}

int stationCnt[] = {9, 51, 33, 26, 50, 33, 41, 18};

bool isStationExist(string station, int line) {
    switch (line) {
        case 1:
            return checkStation(line_1, station, 9);
        case 2:
            return checkStation(line_2, station, 51);
        case 3:
            return checkStation(line_3, station, 33);
        case 4:
            return checkStation(line_4, station, 26);
        case 5:
            return checkStation(line_5, station, 50);
        case 6:
            return checkStation(line_6, station, 33);
        case 7:
            return checkStation(line_7, station, 41);
        case 8:
            return checkStation(line_8, station, 18);
    }
}

line findStation(string s, int line, int& num) {
    int k = 0;
    for (auto i : stations[line - 1]) {
        if (i.name.compare(s) == 0) {
            num = k;
            return i;
        }
        k++;
    }
}

bool canTransfer(line l, int line1, int line2, int& num, int num1) {
    int k = 0;
    for (auto i : stations[line1 - 1]) {
        if (find(begin(i.transfer), end(i.transfer), line2) != end(i.transfer)) {
            // 이번에 탐색한 환승 가능한 역이 이전에 탐색한 환승 가능한 역보다 line1의 역에 더 가까운 경우, 이번에 탐색한 역을 저장
            if (abs(num1 - num) > abs(k - num1)) {
                num = k;
            }
            // 다른 더 가까운 환승 가능한 역이 존재할 수 있으므로 break하지 않고 계속 탐색
        }
        k++;
    }
    if (num == -1000) {
        return false;
    } else {
        return true;
    }
}

// find Transfer Station for Dijkstra
vector<int> canTransferAll(line l, int line1, int line2) {
    int k = 0;
    vector<int> result;
    for (auto i : stations[line1 - 1]) {
        if (find(begin(i.transfer), end(i.transfer), line2) != end(i.transfer)) {
            result.push_back(k);
        }
        k++;
    }

    return result;
}

/* 3. n개의 역에서 n개의 중점 찾음 -> 중복 제거 후 다시 중점 찾음 -> 하나 남을 때까지 반복 */
bool findMiddleStation(string st1, string st2, int line1, int line2, string& resultSt, int& resultLine) {
    // find middle station between two people

    // parameter로 들어온 두 역의 정보 가져오기
    line l1, l2;
    int num1, num2;
    l1 = findStation(st1, line1, num1);
    l2 = findStation(st2, line2, num2);

    // 1. 두 역이 같은 호선인지 체크 (다른 호선으로 입력이 들어왔더라도 환승 가능 호선을 체크하여 같은 호선인지 정확하게 체크)
    if (line1 == line2 || find(begin(l1.transfer), end(l1.transfer), line2) != end(l1.transfer) || find(begin(l2.transfer), end(l2.transfer), line1) != end(l2.transfer)) {
        // 2. 같은 호선이면 두 역 사이에 가장 빠른 역 찾기
        int time = 0;
        if (find(begin(l1.transfer), end(l1.transfer), line2) != end(l1.transfer)) {
            line1 = line2;
            // 호선 갱신 시 findStation 함수를 다시 호출하여 num1, 2을 갱신
            l1 = findStation(st1, line1, num1);
        } else if (find(begin(l2.transfer), end(l2.transfer), line1) != end(l2.transfer)) {
            line2 = line1;
            l2 = findStation(st2, line2, num2);
        }
        // num1이 더 작도록 swap
        if (num1 > num2) {
            int temp = num1;
            num1 = num2;
            num2 = temp;
        }
        // 2-1. 두 역 사이 총 소요시간 계산
        for (int i = num1; i < num2; i++) {
            time += stations[line1 - 1][i].near_time[0];
        }
        time = time / 2;

        // 2-2. 총 소요시간을 반으로 나눈 시간보다 많이 걸리기 시작하는 역 찾기 -> 중간 역
        string result = "";
        for (int i = num1; i < num2; i++) {
            time -= stations[line1 - 1][i].near_time[0];
            if (time <= 0) {
                result = stations[line1 - 1][i].name;
                break;
            }
        }
        resultSt = result;
        resultLine = line1;

    } else {
        int transferNum = -1000;
        string transferStation = "";
        // 3. 다른 호선이면, 두 역 사이에 환승이 가능한 지 여부 체크 (환승은 최소 1회, 환승 가능하다면 환승 가능한 역 중 가장 빠른 역 찾기)
        if (canTransfer(l1, line1, line2, transferNum, num1)) {
            transferStation = stations[line1 - 1][transferNum].name;
            // cout << "환승 가능한 역: " << transferStation << endl;
        } else {
            cout << "환승 불가능, 중간 역 계산 불가능" << endl;
            return false;
        }
        // 4. 환승이 가능하다면, 두 역 사이에 가장 빠른 역 찾기
        int time = 0;

        // 4-1. 두 역 사이 총 소요시간 계산
        // 나중에 시간 하나하나 뺄 때 출발역부터 순서대로 계산이 필요하기 때문에 swap하지 않음.

        if (num1 <= transferNum) {
            for (int i = num1; i < transferNum; i++) {
                time += stations[line1 - 1][i].near_time[0];
            }
        } else {
            for (int i = transferNum; i < num1; i++) {
                time += stations[line1 - 1][i].near_time[0];
            }
        }

        // line2 호선에서의 환승역 num은 line1에서와 다름
        int transferNum2 = -1000;
        findStation(stations[line1 - 1][transferNum].name, line2, transferNum2);
        if (num2 <= transferNum2) {
            for (int i = num2; i < transferNum2; i++) {
                time += stations[line2 - 1][i].near_time[0];
            }
        } else {
            for (int i = transferNum2; i < num2; i++) {
                time += stations[line2 - 1][i].near_time[0];
            }
        }
        // * 환승역에서 환승하는 시간 추가
        int transferTime = 0;
        for (auto i : transferVector) {
            // 환승 전 호선, 환승 역명이 같고, 환승 후 호선이 같은 환승 정보 찾기
            if (i[1] == to_string(line1) && i[2] == transferStation && i[3].substr(0, 1) == to_string(line2)) {
                // cout << "환승 검색 성공" << endl;

                int timeStr = (int)((double)stoi(i[4]) * 0.84);
                transferTime = timeStr;
                // cout << "환승 시간: " << transferTime << endl;
                break;
            }
        }
        time += transferTime;

        // cout << "time: " << time << endl;

        // 4-2. 총 소요시간을 반으로 나눈 시간보다 많이 걸리기 시작하는 역 찾기 -> 중간 역
        // 환승하는 도중에 절반이 넘어가면, 환승역이 중간지점
        // 아니라면, 2-2와 같은 방식으로 중간지점 찾기
        time = time / 2;

        string result = "";
        // 출발역 ~ 환승역까지
        if (num1 <= transferNum) {
            for (int i = num1; i < transferNum; i++) {
                time -= stations[line1 - 1][i].near_time[0];
                if (time <= 0) {
                    result = stations[line1 - 1][i].name;
                    // cout << "result: " << result << endl;
                    resultLine = line1;
                    break;
                }
            }
        } else {
            // num1 > transferNum 일 때는, 출발역에서부터 거슬러 올라가야 하기 때문에, 반대 순서로 계산
            for (int i = num1; i > transferNum; i--) {
                time -= stations[line1 - 1][i].near_time[1];
                if (time <= 0) {
                    result = stations[line1 - 1][i].name;
                    // cout << "result: " << result << endl;
                    resultLine = line1;
                    break;
                }
            }
        }
        // 환승역이 중간역이 되는 경우
        if (result == "") {
            time -= transferTime;
            if (time <= 0) {
                resultLine = line1;
                // cout << "result: " << transferStation << endl;
            }
        }
        // 환승역 ~ 도착역까지
        if (result == "") {
            // 이쪽은 환승역부터 시작해서 도착역까지 흘러가면서 시간을 빼주면 됨
            if (num2 <= transferNum2) {
                for (int i = transferNum2; i > num2; i--) {
                    time -= stations[line2 - 1][i].near_time[1];
                    if (time <= 0) {
                        result = stations[line2 - 1][i].name;
                        // cout << "result: " << result << endl;
                        resultLine = line2;
                        break;
                    }
                }
            } else {
                // 위와 마찬가지로, 반대 순서로 계산
                for (int i = transferNum2; i < num2; i++) {
                    time -= stations[line2 - 1][i].near_time[0];
                    if (time <= 0) {
                        result = stations[line2 - 1][i].name;
                        // cout << "result: " << result << endl;
                        resultLine = line2;
                        break;
                    }
                }
            }
        }

        resultSt = result;
    }

    return true;
}

// dijkstra 알고리즘
vector<vector<int>> dijkstra(string startStation, int startLine) {
    // 모든 호선에 대해 계산

    // 1. 만약 출발역과 같은 호선일 경우, 모든 역의 가중치를 떨어져 있는 거리로 초기화한다.
    // 2. 만약 출발역과 다른 호선일 경우, 우선 출발역의 호선에서 환승 가능한 가장 가까운 역을 찾는다.
    //! 2-1. (+) 환승 가능한 모든 역을 찾은 후, 그 모든 역들에 대해 그 호선의 가중치를 계산하여, 기존의 값보다 더 작은 값이 나오면 갱신한다.
    // 3. 환승 가능한 역을 찾지 못했다면, 그 호선의 역들의 가중치를 모두 무한대(10000)로 설정한다.
    // 4. 환승 가능한 역을 찾았다면, 그 역의 가중치를 초기값으로 설정하여 그 호선의 역들의 가중치를 계산한다.
    // (A환승역의 가중치가 3이면, A환승역에서 B역까지 가는 가중치는 3 + B역까지의 거리가 된다.)

    // 5. 1~4를 모든 출발역에 대해 반복한다.
    // 6. 모든 출발역에 대해 도출된 가중치의 합을 구한다.
    // 7. 가중치의 합이 가장 작은 역을 찾는다. -> 이것이 최적의 환승역이다.

    vector<vector<int>> weight;

    int stNum = 0;
    line st = findStation(startStation, startLine, stNum);

    for (int i = 0; i < 8; i++) {
        // 1. 만약 출발역과 같은 호선일 경우, 모든 역의 가중치를 떨어져 있는 거리로 초기화한다.

        // 출발역에서 환승 가능한 호선이라면, 그 호선도 출발역과 같은 호선 처리 (떨어져 있는 거리로만 가중치를 계산)
        // find i + 1 is in st.transfer
        bool isTransfer = false;
        for (int j = 0; j < st.transfer_num; j++) {
            if (st.transfer[j] == i + 1) {
                isTransfer = true;
                break;
            }
        }
        // isTransfer가 true라면, i + 1 호선도 출발역과 같은 호선 처리
        if (startLine == i + 1 || isTransfer) {
            vector<int> temp;
            for (int j = 0; j < stations[i].size(); j++) {
                temp.push_back(abs(stNum - j));
            }
            weight.push_back(temp);
        }

        // 2. 만약 출발역과 다른 호선일 경우, 우선 출발역의 호선에서 환승 가능한 가장 가까운 역을 찾는다.
        else {
            // 환승 가능한 가장 가까운 역 찾기
            bool ableTransfer = false;
            int transferStationNum = 0;
            vector<int> transferStationNums;
            ableTransfer = canTransfer(st, startLine, i + 1, transferStationNum, stNum);

            transferStationNums = canTransferAll(st, startLine, i + 1);

            // 3. 환승 가능한 역을 찾지 못했다면, 그 호선의 역들의 가중치를 모두 무한대(10000)로 설정한다.
            vector<int> temp;
            int distance = 10000;
            for (int j = 0; j < stations[i].size(); j++) {
                temp.push_back(distance);
            }

            // 4. 환승 가능한 역을 찾았다면, 그 역의 가중치를 초기값으로 설정하여 그 호선의 역들의 가중치를 계산한다.
            // (A환승역의 가중치가 3이면, A환승역에서 B역까지 가는 가중치는 3 + B역까지의 거리가 된다.)
            if (transferStationNums.size() > 0) {
                // 2-1. (+) 환승 가능한 모든 역을 찾은 후, 그 모든 역들에 대해 그 호선의 가중치를 계산하여, 기존의 값보다 더 작은 값이 나오면 갱신한다.
                // 모든 환승 가능한 역들에 대해 반복하여 가중치를 더 작게 더 작게 더 작게 갱신
                for (int transferStationNum : transferStationNums) {
                    // 현재 계산할 호선에서의 환승역 번호를 찾는다.
                    int transNum_transLine = 0;
                    string transferStationName = stations[startLine - 1][transferStationNum].name;
                    // 환승역이 존재하지 않는다면 환승 불가능하다고 판단
                    // transferStationName이 i+1 호선에 존재하는 지 확인
                    bool isExist = false;
                    for (int j = 0; j < stations[i].size(); j++) {
                        if (stations[i][j].name == transferStationName) {
                            isExist = true;
                            transNum_transLine = j;
                            break;
                        }
                    }
                    // 환승역이 존재한다면, 환승역까지의 가중치를 계산한다.
                    if (isExist) {
                        // 환승할 역과 출발역 사이의 거리
                        int distance = abs(stNum - transferStationNum);

                        // 환승 가능한 역을 찾았다면, 그 역의 가중치를 초기값으로 설정하여 그 호선의 역들의 가중치를 계산한다.
                        for (int j = 0; j < stations[i].size(); j++) {
                            // 이미 계산된 역의 가중치 보다 가중치가 작다면 갱신
                            if (temp[j] > abs(transNum_transLine - j) + distance)
                                temp[j] = abs(transNum_transLine - j) + distance;
                        }
                    }
                }
            }

            // 가중치를 계산한 후, weight에 추가한다.
            weight.push_back(temp);
        }
    }

    return weight;
}

int main() {
    int N = 2;
    cout << "인원 수: ";
    cin >> N;
    int station_line[N];
    string station[N];
    float location[N][2];

    // interchange 정보 불러오기
    fstream fs;
    fs.open("/Users/jaewonlee/Desktop/PS/stationInterChange.csv", ios::in);
    if (fs.fail()) {
        cout << "파일을 열 수 없습니다." << endl;
        return 0;
    }
    while (!fs.eof()) {
        string str;
        getline(fs, str);
        // print getline
        vector<string> temp;
        stringstream ss(str);
        string buffer;
        // 한 줄씩 getline으로 읽어옴
        while (getline(ss, buffer)) {
            // 읽어온 한 줄마다 ,를 기준으로 split -> temp에 push_back
            stringstream ss2(buffer);
            string buffer2;
            while (getline(ss2, buffer2, ',')) {
                temp.push_back(buffer2);
            }
        }
        // temp를 v에 push_back
        transferVector.push_back(temp);
    }
    fs.close();
    // print v
    for (int i = 0; i < transferVector.size(); i++) {
        // 한 줄마다의 첫 번째 요소 공백 제거
        transferVector[i][0].erase(transferVector[i][0].begin());
    }

    for (int i = 0; i < N; i++) {
        cout << i + 1 << "번 친구의 출발 호선: ";
        cin >> station_line[i];
        cout << i + 1 << "번 친구의 출발역: ";
        cin >> station[i];
        if (!isStationExist(station[i], station_line[i])) {
            cout << "올바르지 못한 역 정보입니다. 다시 입력해주세요." << endl;
            i--;
        }
    }

    // 출발역, 호선 출력
    for (int i = 0; i < N; i++) {
        cout << "[" << station_line[i] << " , " << station[i] << "] ";
    }
    cout << endl;

    bool isFind = false;

    //---------------------
    // [2] 다익스트라
    //---------------------

    vector<vector<vector<int>>> weights;
    for (int i = 0; i < N; i++) {
        weights.push_back(dijkstra(station[i], station_line[i]));
    }

    vector<vector<int>> resultWeight;
    // calculate sum of weight
    for (int i = 0; i < weights[0].size(); i++) {
        vector<int> temp;
        for (int j = 0; j < weights[0][i].size(); j++) {
            int sum = 0;
            for (int k = 0; k < weights.size(); k++) {
                sum += weights[k][i][j];
            }
            temp.push_back(sum);
        }
        resultWeight.push_back(temp);
    }
    cout << "----------------[2] 다익스트라 알고리즘----------------" << endl;
    cout << "------resultWeight------" << endl;

    // print resultWeight
    for (int i = 0; i < resultWeight.size(); i++) {
        for (int j = 0; j < resultWeight[i].size(); j++) {
            cout << resultWeight[i][j] << " ";
        }
        cout << endl;
    }

    // find min weight's index
    int min = 100000;
    int minIndexI = 0;
    int minIndexJ = 0;
    for (int i = 0; i < resultWeight.size(); i++) {
        for (int j = 0; j < resultWeight[i].size(); j++) {
            if (min > resultWeight[i][j]) {
                min = resultWeight[i][j];
                minIndexI = i;
                minIndexJ = j;
            }
        }
    }

    // print min weight's station name and line
    cout << endl
         << "모두에게 최단 거리인 역 (다익스트라 알고리즘): " << endl;
    line dijkstraResult = stations[minIndexI][minIndexJ];
    cout << "역 이름: " << dijkstraResult.name << endl;
    cout << "호선: " << minIndexI + 1 << endl;

    // ---------------------
    // [3] 커스텀 알고리즘
    // ---------------------

    cout << "----------------[3] 커스텀 알고리즘----------------" << endl;

    // 먼저 입력값을 모두 resultSet Vector에 저장
    vector<pair<string, int>> resultSet;
    for (int i = 0; i < N; i++) {
        pair<string, int> tempPair = make_pair(station[i], station_line[i]);
        resultSet.push_back(tempPair);
    }

    // resultSet에 역이 하나만 남거나, 반복을 100회 이상 했을 시 멈춤
    int cycle = 0;
    while (resultSet.size() != 1 && cycle < 100) {
        cycle++;
        // 그 다음, (0,1), (1,2), (2,3), (3,4), (4,0), ...의 순서쌍의 중간 지점을 구해서 newResultSet에 저장
        vector<pair<string, int>> newResultSet;
        for (int i = 0; i < resultSet.size(); i++) {
            int next = (i + 1) % resultSet.size();
            string tempStation = "";
            int tempLine = 0;
            isFind = findMiddleStation(resultSet[i].first, resultSet[next].first, resultSet[i].second, resultSet[next].second, tempStation, tempLine);
            if (isFind) {
                pair<string, int> tempPair = make_pair(tempStation, tempLine);
                newResultSet.push_back(tempPair);
            } else {
                cout << "중간 지점을 찾을 수 없습니다." << endl;
                return 0;
            }
        }

        // newResultSet에 저장된 중간 지점들을 resultSet에 다시 저장
        resultSet.clear();
        for (int i = 0; i < newResultSet.size(); i++) {
            pair<string, int> tempPair = make_pair(newResultSet[i].first, newResultSet[i].second);
            resultSet.push_back(tempPair);
        }

        // resultSet에 저장된 중간 지점들을 출력
        for (int i = 0; i < resultSet.size(); i++) {
            cout << "[" << resultSet[i].second << " , " << resultSet[i].first << "] ";
        }
        cout << endl
             << endl;

        // resultSet 중복 제거 - brute force로 검사하여 중복 제거
        vector<pair<string, int>> tempResultSet = resultSet;
        vector<pair<string, int>> results;
        for (int i = 0; i < resultSet.size(); i++) {
            bool isFind = false;
            for (pair<string, int> p : results) {
                if (p.first == resultSet[i].first) {
                    isFind = true;
                    break;
                }
            }
            if (!isFind) {
                results.push_back(resultSet[i]);
            }
        }

        // 중복 제거된 results을 다시 resultSet에 저장
        resultSet.clear();
        for (int i = 0; i < results.size(); i++) {
            pair<string, int> tempPair = make_pair(results[i].first, results[i].second);
            resultSet.push_back(tempPair);
        }

        // results의 길이가 0이라면 (중복된 역이 없다면) 종료
        if (results.size() == 0) {
            break;
        }
    }

    if (resultSet.size() == 1)
        cout << "최종 결과: " << resultSet[0].first << "역 " << resultSet[0].second << "호선" << endl;
    else
        cout << "최종 결과: "
             << "역을 찾을 수 없습니다." << endl;

    // ------------------------------------------------------------------------------------
}
